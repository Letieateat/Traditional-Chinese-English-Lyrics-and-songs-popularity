# -*- coding: utf-8 -*-
"""03Lyrics & Popularity_Semantics Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LN2jPlwe68KVL6ytVwOgC6ikuiJ7JkpN

##Visualize the relationship between song popularity and semantics based on lyrics
"""

!pip install sentence-transformers
!pip install -U kaleido

import pandas as pd
import os
from sentence_transformers import SentenceTransformer
import plotly.express as px
from sklearn.decomposition import PCA

class LyricsVectorizer:

#Define a function to process and vectorize song lyrics
    def __init__(self):
        self.model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')#use multilingual model for both English and Chinese
        self.title = None
        self.artist = None
        self.lyrics = None
        self.embedding = None

#Define a function to transform lyrics into vectors
    def encode(self, lyrics):
        embedding = self.model.encode(lyrics, normalize_embeddings=True)
        self.embedding = embedding
        return embedding

#Define a function to get vector representation of the lyrics
    def get_formatted_lyrics(self, lyrics):
        return self.encode(lyrics)

# Read the CSV file containing lyrics
data = pd.read_csv('https://raw.githubusercontent.com/Letieateat/Traditional-Chinese-English-Lyrics-and-songs-popularity/main/song-data/TW_songs.csv')

# Initialize the LyricsVectorizer
vectorizer = LyricsVectorizer()

# Get the formatted lyrics vectors for each song
data['Lyrics_Vector'] = data['lyrics'].apply(vectorizer.get_formatted_lyrics)

# Define column rankings ad 'popularity'
data['popularity'] = data['rankings']

# Define a function to split the vector column into separate columns
def split_vector_to_columns(row):
    vector_list = row['Lyrics_Vector']
    for i, vector in enumerate(vector_list):
        row[str(i + 1)] = vector
    return row

# Apply the function to each row
data = data.apply(split_vector_to_columns, axis=1)

# Drop the original 'Lyrics_Vector' column
data.drop(columns=['Lyrics_Vector'], inplace=True)

# Save the updated DataFrame to a new CSV file
data.to_csv('TW_data.csv', index=False)
df = pd.read_csv('TW_data.csv')

#Reduces the size of the dataset to a given parameter
def reduce_dimensionality(dataset, n_dimensions):
  pca = PCA(n_components=n_dimensions)
  return pca.fit_transform(dataset)

coors = reduce_dimensionality(df[df.columns[7:]], 2)

aux = pd.DataFrame({
    'title': df.song_name,
    'artist': df.artist_name,
    'popularity': df.popularity,
    'x': coors[:, 0],
    'y': coors[:, 1],
})

fig = px.scatter(aux, x='x', y='y', color='popularity', color_continuous_scale='blugrn')
fig.update_traces(marker=dict(size=5))
fig['layout']['title'] = '2D representation of the Traditional Chinese lyrics dataset'
if not os.path.exists('images'):
    os.makedirs('images')
fig.write_image('images/lyrics_dataset2D.png', scale=3, width = 1000, height = 480)
fig.show()

coors = reduce_dimensionality(df[df.columns[7:]], 3)

aux = pd.DataFrame({
    'title': df.song_name,
    'artist': df.artist_name,
    'popularity': df.popularity,
    'x': coors[:, 0],
    'y': coors[:, 1],
    'z': coors[:, 2]
})

fig = px.scatter_3d(aux, x='x', y='y', z='z', color = 'popularity', color_continuous_scale='blugrn')
fig.update_traces(marker=dict(size=3,
                              line=dict(width=1,
                                        color='DarkSlateGrey')),
                  selector=dict(mode='markers'))
fig['layout']['title'] = '3D representation of the Traditional Chinese lyrics dataset'
fig.write_image('images/lyrics_dataset3D.png', scale=3, width = 1000, height = 480)
fig.show()

class LyricsVectorizer:

#Define a function to process and vectorize song lyrics
    def __init__(self):
        self.model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
        self.title = None
        self.artist = None
        self.lyrics = None
        self.embedding = None

#Define a function to transform lyrics into vectors
    def encode(self, lyrics):
        embedding = self.model.encode(lyrics, normalize_embeddings=True)
        self.embedding = embedding
        return embedding

#Define a function to get vector representation of the lyrics
    def get_formatted_lyrics(self, lyrics):
        return self.encode(lyrics)

# Read the CSV file containing lyrics
data = pd.read_csv('https://raw.githubusercontent.com/Letieateat/Traditional-Chinese-English-Lyrics-and-songs-popularity/main/song-data/EN_songs.csv')

# Initialize the LyricsVectorizer
vectorizer = LyricsVectorizer()

# Get the formatted lyrics vectors for each song
data['Lyrics_Vector'] = data['Lyrics'].apply(vectorizer.get_formatted_lyrics)

# Define a function to split the vector column into separate columns
def split_vector_to_columns(row):
    vector_list = row['Lyrics_Vector']
    for i, vector in enumerate(vector_list):
        row[str(i + 1)] = vector
    return row

# Apply the function to each row
data = data.apply(split_vector_to_columns, axis=1)

# Drop the original 'Lyrics_Vector' column
data.drop(columns=['Lyrics_Vector'], inplace=True)

# Save the updated DataFrame to a new CSV file
data.to_csv('EN_data.csv', index=False)
df = pd.read_csv('EN_data.csv')

#Reduces the size of the dataset to a given parameter
def reduce_dimensionality(dataset, n_dimensions):
  pca = PCA(n_components=n_dimensions)
  return pca.fit_transform(dataset)

coors = reduce_dimensionality(df[df.columns[8:]], 2)

aux = pd.DataFrame({
    'title': df['Track Name'],
    'artist': df['Artist Name'],
    'popularity': df['Popularity'],
    'x': coors[:, 0],
    'y': coors[:, 1],
})

fig = px.scatter(aux, x='x', y='y', color='popularity', color_continuous_scale='blugrn')
fig.update_traces(marker=dict(size=5))
fig['layout']['title'] = '2D representation of the English lyrics dataset'
if not os.path.exists('images'):
    os.makedirs('images')
fig.write_image('images/lyrics_dataset2D.png', scale=3, width = 1000, height = 480)
fig.show()

coors = reduce_dimensionality(df[df.columns[8:]], 3)

aux = pd.DataFrame({
    'title': df['Track Name'],
    'artist': df['Artist Name'],
    'popularity': df['Popularity'],
    'x': coors[:, 0],
    'y': coors[:, 1],
    'z': coors[:, 2]
})

fig = px.scatter_3d(aux, x='x', y='y', z='z', color = 'popularity', color_continuous_scale='blugrn')
fig.update_traces(marker=dict(size=3,
                              line=dict(width=1,
                                        color='DarkSlateGrey')),
                  selector=dict(mode='markers'))
fig['layout']['title'] = '3D representation of the English lyrics dataset'
fig.write_image('images/lyrics_dataset3D.png', scale=3, width = 1000, height = 480)
fig.show()